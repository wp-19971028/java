/**
 * 案例:
 * 演示方法的定义格式
 * <p>
 * 方法简述:
 * 把一些具有独立功能的代码封装起来
 * 使其为一个具有特殊功能的代码集,
 * 这个代码集就叫--方法.
 * <p>
 * 目的 :
 * 提高代码复用性 (
 * 我们把重复做事儿抽取成方法, 以
 * 后需要用到该逻辑的时候, 不需要重新编写代码了,
 * 直接调用方法即可.)
 *
 * 格式:
 * 修饰符 返回值的数据类型 方法名(数据类型 参数名1, 数据类型 参数名2) {
 *     //方法体
 *     return 具体的返回值;
 * }
 *
 * 格式详解:
 * 修饰符:                目前先理解为就是 public static,   面向对象详解.
 * 返回值的数据类型:      指的是方法调用完毕后, 返回给我们一个什么类型的值.
 * 方法名:                遵循"小驼峰命名法", 而且要符合命名规则和规范, 是帮我们调用指定方法的.
 * (数据类型 参数名1):    形式参数, 形容调用方法的时候, 需要传入什么类型的值, 注意: 形参没有具体指.
 * 方法体:                具体的逻辑代码.
 * return 具体的返回值:   方法指定完毕后, 要返回的具体的结果.
 *
 * 注意事项:
 *     1. 方法与方法之间是平级关系, 不能嵌套定义.
 *     2. 方法只有被调用, 才会执行.
 *     3. 定义方法的时候, 参数列表中的参数叫: 形式参数(简称: 形参), 形容调用方法需要传入什么类型的值.
 *     4. 调用方法的时候, 参数列表中传入的具体的值叫: 实际参数(实参), 指的是具体参与操作的数据.
 *     5. 如果方法没有明确的返回值, 则返回值的数据类型必须写成 void
 *     6. 如果方法没有明确的返回值, 则return语句可以省略不写.
 *     7. 方法的功能越单一越好.
 * 学习"方法"这个技术点的小技巧:
 *     定义方法的三个明确:
 *         1. 明确方法名.
 *         2. 明确参数列表.
 *         3. 明确返回值的数据类型.
 *
 *     调用方法时的三个步骤:
 *         1. 写方法名,    调用谁就写谁, 注意大小写, 不要写错了.
 *         2. 传参.        方法要什么类型的数据, 我们就传入什么类型的值.
 *         3. 接收返回值.  方法返回什么类型的数据, 我们就用什么类型的变量来接收.
 */
public class it_01_方法的定义格式 {
    // main方法是程序的猪入口,所有的代码都是从这里执行的
    public static void main(String[] args) {
        // 调用printHello() 的方法
        printHello();
    }
    // 需求定义printHello()方法,用来打印"Hello World"字符串
    /*
    定义方法的三个明确:
      1. 明确方法名.               printHello()
      2. 明确参数列表.             空参
      3. 明确返回值的数据类型.     无具体返回值, 即: void类型
     */
    private static void printHello() {
        System.out.println("Hello World! 1");
        System.out.println("Hello World! 2");
        System.out.println("Hello World! 3");
        System.out.println("Hello World! 4");
        System.out.println("Hello World! 5");
    }
}
