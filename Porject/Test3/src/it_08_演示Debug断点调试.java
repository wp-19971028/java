/*
    案例: 演示Debug断点调试.

    Debug断点调试简介:
        概述:
            Debug是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。
        步骤:
            1. 加断点.         哪里不会点哪里.
                小技巧: 一般是加在方法的第一行有效代码处.
            2. 如何开启Debug断点调试.
                方式一: 右键, 选择Debug ....
                方式二: 选择"小蜘蛛图标"
                细节: 蓝色背景标注的代码, 是程序将要执行, 但是还没有执行的代码.
            3. 看哪里.
                下左: Frames窗口, 记录当前程序执行到哪里了, 类似于栈, 也会有"先进后出"的动作.
                下中: Variables窗口, 记录变量的变化过程的.
                下右: Console窗口, 即: 控制台, 用来展示程序运行结果的.
            4. 如何进行下一步:
                F7: 逐过程调试, 看到自定义方法后, 会进到方法内部.
                F8: 逐行调试, 看到自定义方法后, 不会进到方法内部, 而是把代码当做一行处理.
                F9: 逐断点调试, 直接跳到下一个断点处, 如果当前断点已经是最后一个断点, 再次按下F9则会结束Debug调试.
            5. 如何结束Debug断点调试.
                方式一: 调试完, 即: 程序走完.
                方式二: 点左侧导航条的"红色的正方形"按钮.
            6. 如何移除断点.
                方式一: 逐个移除, 重新点击断点即可.
                方式二: 移除所有断点.
                    点左侧导航条的"双圆点图标, break points" -> 左上角的"减号 -" -> OK
 */
public class it_08_演示Debug断点调试 {
    public static void main(String[] args) {
        //2.在main方法中调用getSum()方法.
        int a = 10;
        int b = 20;
        int sum = getSum(a, b);
        System.out.println("两个整数和为: " + sum);
    }

    //1.定义getSum()方法, 用来获取两个整数和.
    public static int getSum(int a, int b) {
        int sum = a + b;
        return sum;
    }
}
